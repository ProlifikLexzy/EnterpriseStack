// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Shared.Context;

namespace MyApp.Core.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    [Migration("20190623040312_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyApp.Data.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(150);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99ae0c45-d682-4542-9ba7-1281e471916b"),
                            CreatedBy = new Guid("016020e3-5c50-40b4-9e66-bba56c9f5bf2"),
                            CreatedOn = new DateTime(2019, 6, 23, 4, 3, 12, 68, DateTimeKind.Utc).AddTicks(8740),
                            FirstName = "Lexzy",
                            Gender = "M",
                            IsDeleted = false,
                            LastName = "Prolifik",
                            ModifiedBy = new Guid("016020e3-5c50-40b4-9e66-bba56c9f5bf2"),
                            ModifiedOn = new DateTime(2019, 6, 23, 4, 3, 12, 68, DateTimeKind.Utc).AddTicks(8750),
                            PhoneNumber = "08062066851"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Activated");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("016020e3-5c50-40b4-9e66-bba56c9f5bf2"),
                            AccessFailedCount = 0,
                            Activated = true,
                            ConcurrencyStamp = "8a629799-eed1-4f82-a9f5-5d70a353bf8f",
                            CreatedOnUtc = new DateTime(2019, 6, 23, 5, 3, 12, 75, DateTimeKind.Local).AddTicks(3010),
                            Email = "mitserver.devapp@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Smartware",
                            FullName = "Smartware Solutions",
                            IsDeleted = false,
                            LastLoginDate = new DateTime(2019, 6, 23, 5, 3, 12, 78, DateTimeKind.Local).AddTicks(7220),
                            LastName = "Solutions",
                            LockoutEnabled = false,
                            NormalizedEmail = "MITSERVER.DEVAPP@GMAIL.COM",
                            NormalizedUserName = "MITSERVER.DEVAPP@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHJIOxULXJUecxN6YadFhK7EjqHUaY6/CzRPZLnznEH+obP+aTGBSZlKOoCS3LngCg==",
                            PhoneNumber = "08062066851",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "016020e3-5c50-40b4-9e66-bba56c9f5bf2",
                            TwoFactorEnabled = false,
                            UserName = "mitserver.devapp@gmail.com"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasAlternateKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasAlternateKey("UserId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppRoleClaim", b =>
                {
                    b.HasOne("MyApp.Shared.Models.MyAppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserClaim", b =>
                {
                    b.HasOne("MyApp.Shared.Models.MyAppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserLogin", b =>
                {
                    b.HasOne("MyApp.Shared.Models.MyAppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserRole", b =>
                {
                    b.HasOne("MyApp.Shared.Models.MyAppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyApp.Shared.Models.MyAppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.Shared.Models.MyAppUserToken", b =>
                {
                    b.HasOne("MyApp.Shared.Models.MyAppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
